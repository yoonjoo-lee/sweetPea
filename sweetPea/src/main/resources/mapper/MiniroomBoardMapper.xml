<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="pea.board.mapper.MiniroomBoardMapper">
	<select id="joinMiniHome" parameterType="int" resultType="MiniHomeVo">
		SELECT a.* , b.name, b.miniProfile
		  FROM pea_minihome a
		  JOIN pea_user b
		    ON a.uidx = b.uidx
		 WHERE a.uidx = #{uidx}
	</select>
<!-- 최초 미니홈피  -->	
	<insert id="insertMiniHome" parameterType="int">
		INSERT INTO pea_minihome(
				uidx
		)VALUES(
				#{uidx}
		)
	</insert>
<!-- 최초 게시글 -->
	<insert id="firstBoard" parameterType="int">
		INSERT INTO pea_minihome_board(
			   uidx
			 , title
			 , content
			 , writer
			 , ip
			 , category
		)VALUES(
			   #{uidx}
			 , 'SweetPea에 오신걸 환영합니다.'
			 , '최초 미니홈피가 생성되었습니다'
			 , #{uidx}
			 , 'NoIP'
			 , 1
		)
	</insert>
<!-- 최초 카테고리 -->
	<insert id="firstSubCategory" parameterType="int">
		INSERT INTO pea_subcategory
		(
			   uidx
			 , subcategory
			 , mbidx
		)
		VALUES
		(
			   #{uidx}
			 , '새 카테고리'
			 , (
			 	SELECT max(mbidx)
			 	  FROM pea_minihome_board
			   )
		)
	</insert>
	
	<update id="changeHeader" parameterType="MiniHomeVo">
		UPDATE pea_minihome
		   SET h2 	= #{h2}
		 WHERE uidx = #{uidx}
	</update>
	
	<update id="changeLeftBoard" parameterType="MiniHomeVo">
		UPDATE pea_minihome
		   SET h1	= #{h1}
		 WHERE uidx = #{uidx}
	</update>
	
	<!-- 카테고리 종류 확인 -->
	<select id="checkCategory" parameterType="int" resultType="MiniRoomBoardVo">
		  SELECT subcategory
		    FROM pea_subcategory
		   WHERE uidx		= #{uidx}
		     AND delyn		= 'N' 
	    GROUP BY subcategory;
	</select>
	
	<update id="delCategory" parameterType="MiniroomBoardVo">
		UPDATE pea_minihome_board a, pea_subcategory b
		   SET a.delyn = 'Y',b.delyn = 'Y'
		 WHERE subcategory	= #{subcategory}
		   AND a.uidx 		= #{uidx}
	</update>
	
	<insert id="plusCategory" parameterType="MiniroomBoardVo">
		INSERT INTO pea_subcategory
		(
			   uidx
			 , subcategory
		)
		VALUES
		(
			   #{uidx}
			 , #{subcategory}
		)
	</insert>
	
	<update id="changeCategory" parameterType="MiniroomBoardVo">
		UPDATE pea_subcategory
		   SET subcategory	= #{subcategory}
		 WHERE uidx = #{uidx}
		   AND subcategory = #{content}
	</update>
	
	<!-- 친구추가 -->
	<insert id="addFriends" parameterType="FriendsVo">
		INSERT INTO pea_friends
		(
			   uidx
			 , bfidx
			 , uname
			 , bfname
		)
		VALUES
		(
			   #{uidx}
			 , #{bfidx}
			 , #{uname}
			 , #{bfname}
		)
	</insert>
	
	<!-- 친구추가 확인 -->
	<select id="checkFriends" parameterType="FriendsVo" resultType="string">
		SELECT consent
		  FROM pea_friends
		 WHERE (uidx = #{uidx} AND bfidx = #{bfidx})
		    OR (uidx = #{bfidx} AND bfidx = #{uidx})
	</select>
	
	<!-- 친구요청 목록 확인 -->
	<select id="friendsCheck" parameterType="int" resultType="string">
		SELECT *
		  FROM pea_friends		  		     
		 WHERE bfidx = #{uidx}
		   AND consent = 'N'
		 LIMIT 1
	</select>
	
	<!-- 친구요청 목록 -->
	<select id="friendsCheckList" parameterType="SearchVo" resultType="FriendsVo">
		SELECT	A.* 
	  	  FROM	(SELECT @rownum:=@rownum+1 AS rn
	  	  			  , b.*
	  	  			  , c.name
	  	  			  , c.id
			       FROM pea_friends b
			       JOIN(SELECT uidx,name,id
		  		          FROM pea_user
		  				)c
		  		     ON b.uidx = c.uidx
			    WHERE b.bfidx = #{uidx}
	  			  AND (@rownum:=0) = 0
 	 			  AND b.consent = 'N'
 	 			ORDER by fidx desc
		 	) A 
	 	 WHERE rn BETWEEN #{start} AND #{end};
	</select>
	
	<!-- 친구요청 카운트 -->
	<select id="friendsCheckList_count" parameterType="int" resultType="int">
		SELECT COUNT(*)
		  FROM pea_friends a
		  JOIN (SELECT uidx,name,id
		  		  FROM pea_user
		  )b
		    ON a.uidx = b.uidx		     
		 WHERE a.bfidx = #{uidx}
		   AND a.consent = 'N'
	</select>
	
	<!-- 친구요청 승낙 -->
	<update id="acceptFriends" parameterType="FriendsVo">
		UPDATE pea_friends
		   SET consent	= 'Y'
		 WHERE uidx = #{uidx}
		   AND bfidx = #{bfidx}
	</update>
	
	<!-- 친구요청 거절 -->
	<delete id="refuseFriends" parameterType="FriendsVo">
		DELETE 
		  FROM pea_friends
		 WHERE uidx = #{uidx}
		   AND bfidx = #{bfidx}
	</delete>
	
	<!-- 친구신청 카운트 -->
	<select id="friendsAcceptList_count" parameterType="int" resultType="int">
		SELECT COUNT(*)
		  FROM pea_friends a
		  JOIN (SELECT uidx,name,id
		  		  FROM pea_user
		  )b
		    ON a.bfidx = b.uidx		     
		 WHERE a.uidx = #{uidx}
		   AND a.consent = 'N'
	</select>
	
	<!-- 친구신청 목록 -->
	<select id="friendsAcceptList" parameterType="SearchVo" resultType="FriendsVo">
		SELECT	A.* 
	  	  FROM	(SELECT @rownum:=@rownum+1 AS rn
	  	  			  , b.*
	  	  			  , c.name
	  	  			  , c.id
			       FROM pea_friends b
			       JOIN(SELECT uidx,name,id
		  		          FROM pea_user
		  				)c
		  		     ON b.bfidx = c.uidx
			    WHERE b.uidx = #{uidx}
	  			  AND (@rownum:=0) = 0
 	 			  AND b.consent = 'N'
 	 			ORDER by fidx desc
		 	) A 
	 	 WHERE rn BETWEEN #{start} AND #{end};
	</select>
	
	<!-- 친구신청 거절 -->
	<delete id="cancelFriends" parameterType="FriendsVo">
		DELETE 
		  FROM pea_friends
		 WHERE uidx = #{uidx}
		   AND bfidx = #{bfidx}
		   AND consent = 'N'
	</delete>
	
	<!-- 친구목록 리스트 -->
	<select id="friendsAllList" parameterType="int" resultType="FriendsVo">
		SELECT * 
		  FROM pea_friends a
		  JOIN (SELECT uidx,name,profile 
		  		  FROM pea_user
		  		) b ON CASE 
		  			   WHEN a.bfidx=b.uidx THEN a.uidx=#{uidx}
		  			   WHEN a.uidx=b.uidx THEN a.bfidx=#{uidx}
		  			    END
		 WHERE (a.uidx = #{uidx} or a.bfidx = #{uidx})
		   AND consent='Y'
		 ORDER BY b.name; 
	</select>
	
	<!-- 친구삭제 -->
	<delete id="delFriends" parameterType="FriendsVo">
		DELETE 
		  FROM pea_friends
		 WHERE consent = 'Y'
		   AND (	(uidx =  #{uidx} AND bfidx = #{bfidx})
		   		OR  (uidx = #{bfidx} AND bfidx =  #{uidx})
		   )   
	</delete>
	
	
	<!-- 친구명 변경 -->
	<update id="changeFriends" parameterType="FriendsVo">
		UPDATE pea_friends
		   SET  uname = CASE WHEN (uidx = #{uidx} AND bfidx = #{bfidx}) THEN #{uname}
		   	   				 WHEN (bfidx = #{uidx} AND uidx = #{bfidx}) THEN #{bfname}
		        		 END,
			   bfname = CASE WHEN (uidx = #{uidx} AND bfidx = #{bfidx}) THEN #{bfname}
		   	   				 WHEN (bfidx = #{uidx} AND uidx = #{bfidx}) THEN #{uname}
		        		 END 		        			 
		 WHERE (uidx=#{uidx} AND bfidx=#{bfidx}) OR (uidx=#{bfidx} AND bfidx=#{uidx})	
	</update>

	<!-- 친구검색 -->
	<select id="searchFriends" parameterType="FriendsVo" resultType="FriendsVo">
		SELECT * 
		  FROM pea_friends a
		  JOIN (SELECT uidx,name,profile 
		  		  FROM pea_user
		  		) b ON CASE 
		  			   WHEN a.bfidx=b.uidx THEN a.uidx=#{uidx}
		  			   WHEN a.uidx=b.uidx THEN a.bfidx=#{uidx}
		  			    END
		 WHERE (a.uidx = #{uidx} or a.bfidx = #{uidx})
		   AND consent='Y'
		   AND (
		   		CASE 
		   		WHEN a.bfidx = #{uidx} THEN a.uname like concat('%',#{name},'%')
		   		WHEN a.uidx = #{uidx} THEN a.bfname like concat('%',#{name},'%')
		   		 END
	   		OR
	   			CASE
	   			WHEN a.bfidx = #{uidx} THEN b.name like concat('%',#{name},'%')
		   		WHEN a.uidx = #{uidx} THEN b.name like concat('%',#{name},'%')
	   			 END
		   )
		 ORDER BY b.name; 
	</select>
	
	<!-- 내 미니홈피 스타일  -->
	<select id="myMiniStyle" parameterType="int" resultType="MiniHomeVo">
		SELECT *
		 FROM pea_minihome
		 WHERE uidx=#{uidx}
	</select>
	
	<!-- 내 미니룸 -->
	<select id="myMiniroom" parameterType="int" resultType="ItemVo">
		SELECT a.* FROM pea_item a 
		 JOIN pea_user_item b 
		ON a.iidx=b.iidx 
		 WHERE b.uidx=#{uidx} AND b.inyn='Y'
	</select>
</mapper>